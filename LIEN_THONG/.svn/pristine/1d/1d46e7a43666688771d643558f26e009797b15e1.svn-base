
using CMCLIS.CVAN.CORE;
using CMCLIS.CVAN.DATA.OBJECTS;
using CMCLIS.CVAN.ENTITY;
using CMCLIS.CVAN.SETTING;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Reflection;
using System.ServiceProcess;
using System.Threading.Tasks;
using System.Timers;
using System.Xml;


namespace CMCLIS.CVAN.WServiceRequest
{
    public partial class WService : ServiceBase
    {

        private Timer timer = null;
        MessageSenderInfo senderInfo = new MessageSenderInfo();
        private string _MSG_TEMP = string.Empty;

        public WService()
        {

            InitializeComponent();
            senderInfo.VERSION = ConfigurationManager.AppSettings["VERSION"];
            senderInfo.SENDER_CODE = ConfigurationManager.AppSettings["SENDER_CODE"];
            senderInfo.SENDER_NAME = ConfigurationManager.AppSettings["SENDER_NAME"];
            senderInfo.RECEIVER_CODE = ConfigurationManager.AppSettings["RECEIVER_CODE"];
            senderInfo.RECEIVER_NAME = ConfigurationManager.AppSettings["RECEIVER_NAME"];
            senderInfo.TRAN_CODE = ConfigurationManager.AppSettings["TRAN_CODE"];
            senderInfo.ORIGINAL_CODE = ConfigurationManager.AppSettings["ORIGINAL_CODE"];
            senderInfo.ORIGINAL_NAME = ConfigurationManager.AppSettings["ORIGINAL_NAME"];
            //Test();
            timer = new Timer();
            this.timer.Interval = int.Parse(ConfigurationManager.AppSettings["INTERVAL"]);
            this.timer.Elapsed += new System.Timers.ElapsedEventHandler(this.timer_Tick);
        }

        #region API

        private List<CVAN_MSGOInfo> GetListDataByPageIndex(int pageIndex, int pageSize, List<CVAN_MSGOInfo> listData)
        {
            try
            {
                List<CVAN_MSGOInfo> childList = new List<CVAN_MSGOInfo>();
                if (pageIndex == 1)
                {
                    childList = listData.Where(m => m.STT >= (pageIndex - 1) * pageSize && m.STT <= pageIndex * pageSize).ToList();
                }
                else
                {
                    childList = listData.Where(m => m.STT > (pageIndex - 1) * pageSize && m.STT <= pageIndex * pageSize).ToList();
                }
                return childList;
            }
            catch (Exception ex)
            {

                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return null;
            }
        }

        private void DoSomeWork(int pageIndex, int pageSize, List<CVAN_MSGOInfo> listData)
        {
            try
            {
                List<CVAN_MSGOInfo> childList = GetListDataByPageIndex(pageIndex, pageSize, listData);
                if (childList != null && childList.Count > 0)
                {
                    foreach (var info in childList)
                    {
                        var result = REQUEST_PROCESS_DATA.SenderToThue(Utility.LoadFile(Config.PATH_DATA_SAVE_FILE + info.CVAN_CONTENT_XML), info.CVAN_CODE);
                        if (result.ResultCode == "1" && !string.IsNullOrEmpty(result.ReturnValue))
                        {
                            XmlDocument xmlDoc = new XmlDocument();
                            xmlDoc.LoadXml(result.ReturnValue);
                            CVAN_EXCHANGEInfo _CVAN_EXCHANGEInfo = new CVAN_EXCHANGEInfo()
                            {
                                CVAN_CODE = Guid.NewGuid().ToString().ToUpper(),
                                CVAN_CONTENT_XML = xmlDoc.OuterXml,
                                CVAN_LAN_GUI = 0,
                                CVAN_MA_GD = info.CVAN_CODE,
                                CVAN_STATUS_CODE = "0",
                                CUSER = "VAN"
                            };
                            int resultValue = DataObjectFactory.GetInstanceCVAN_EXCHANGE().Add(_CVAN_EXCHANGEInfo);
                            if (resultValue != -1)
                            {
                                info.CVAN_STATUS_SEND = true;
                                DataObjectFactory.GetInstanceCVAN_MSGO().Update(info);
                            }

                        }
                        
                    }
                }

            }
            catch (Exception ex)
            {

                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);

            }
        }

        #endregion


        public void Test()
        {
            int totalRecord = 0;
            List<CVAN_MSGOInfo> listData = DataObjectFactory.GetInstanceCVAN_MSGO().CVAN_MSGO_GetAllWithPadding(string.Empty, string.Empty, string.Empty, 0, 1, int.MaxValue, ref totalRecord);
            if (listData != null && listData.Count > 0)
            {
                List<int> listPage = Utility.GetListPage(listData.Count, int.Parse(Config.PAGE_SIZE));
                Task[] tasks = new Task[listPage.Count];
                int ctr = 0;
                foreach (var item in listPage)
                {
                    var task = Task.Factory.StartNew(() => DoSomeWork(item, int.Parse(Config.PAGE_SIZE), listData));
                    tasks[ctr] = task;
                    ctr++;

                }
                var result = Task.Factory.ContinueWhenAll(tasks,
                 (taskResult) =>
                 {
                     try
                     {
                         Task.WaitAll(taskResult);
                     }
                     catch (Exception ex)
                     {
                         LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                         var faultedTasks = tasks.Where(t => t.IsFaulted);
                     }

                 });
            }
        }

        private void timer_Tick(object sender, EventArgs e)
        {
            try
            {
                int totalRecord = 0;
                List<CVAN_MSGOInfo> listData = DataObjectFactory.GetInstanceCVAN_MSGO().CVAN_MSGO_GetAllWithPadding(string.Empty, string.Empty, string.Empty, 0, 1, int.MaxValue, ref totalRecord);
                if (listData != null && listData.Count > 0)
                {
                    List<int> listPage = Utility.GetListPage(listData.Count, int.Parse(Config.PAGE_SIZE));
                    Task[] tasks = new Task[listPage.Count];
                    int ctr = 0;
                    foreach (var item in listPage)
                    {
                        var task = Task.Factory.StartNew(() => DoSomeWork(item, int.Parse(Config.PAGE_SIZE), listData));
                        tasks[ctr] = task;
                        ctr++;

                    }
                    var result = Task.Factory.ContinueWhenAll(tasks,
                     (taskResult) =>
                     {
                         try
                         {
                             Task.WaitAll(taskResult);
                         }
                         catch (Exception ex)
                         {
                             LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                             var faultedTasks = tasks.Where(t => t.IsFaulted);
                         }

                     });
                }


            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);

            }
        }



        protected override void OnStart(string[] args)
        {
            try
            {
                _MSG_TEMP = Utility.LoadFile(ConfigurationManager.AppSettings["MSG_TEMP"]);
                timer.Enabled = true;
                timer.Start();
                LogEventError.LogEvent("Service Started successfully" + "[" + DateTime.Now.ToString() + "]");
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);

            }
        }

        protected override void OnStop()
        {
            try
            {
                timer.Enabled = false;
                timer.Stop();
                LogEventError.LogEvent("Service stop successfully" + "[" + DateTime.Now.ToString() + "]");
            }
            catch (Exception ex)
            {

                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);

            }
        }
    }
}
