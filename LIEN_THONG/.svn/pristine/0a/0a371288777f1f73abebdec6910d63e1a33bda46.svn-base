using CMCLIS.CVAN.CORE;
using CMCLIS.CVAN.CORE.Sercurity;
using CMCLIS.CVAN.SETTING;
using CMCLIS.CVAN.ENTITY;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml;
using CMCLIS.CVAN.DATA.OBJECTS;

namespace CMCLIS.CVAN.WServiceRequest
{
    public class REQUEST_PROCESS_DATA
    {
        public static Response SenderToThue(string xmlContent, string CVAN_CODE)
        {
            try
            {
                string MSG_TYPE = string.Empty;
                string SEQ_ID = string.Empty;
                string SEQ_REFID = string.Empty;
                string MA_HS = string.Empty;
                string MA_GCN = string.Empty;
                string SO_PHIEU = string.Empty;
                string NGAYCHUYEN = string.Empty;
                string NGUOICHUYEN = string.Empty;
                string LOAI_DENGHI = string.Empty;
                string LOAI_HOSO = string.Empty;
                string DK_GHINO_NVTC = string.Empty;
                string TT_SOHUU = string.Empty;

                XmlDocument xmlDocumentSign = new XmlDocument();
                xmlDocumentSign.LoadXml(xmlContent);
                string namespaceURISign = xmlDocumentSign.DocumentElement.NamespaceURI;
                if (!string.IsNullOrEmpty(namespaceURISign))
                {
                    XmlNamespaceManager nsmgrSign = new XmlNamespaceManager(xmlDocumentSign.NameTable);
                    nsmgrSign.AddNamespace("NamespaceCode", namespaceURISign);                    
                    MSG_TYPE = xmlDocumentSign.SelectNodes("//NamespaceCode:MSG_TYPE", nsmgrSign)[0].InnerXml;
                    SEQ_ID = xmlDocumentSign.SelectNodes("//NamespaceCode:SEQ_ID", nsmgrSign)[0].InnerXml;
                    SEQ_REFID = xmlDocumentSign.SelectNodes("//NamespaceCode:SEQ_REFID", nsmgrSign)[0].InnerXml;

                    MA_HS = xmlDocumentSign.SelectNodes("//NamespaceCode:MA_HS", nsmgrSign)[0].InnerXml;
                    MA_GCN = xmlDocumentSign.SelectNodes("//NamespaceCode:MA_GCN", nsmgrSign)[0].InnerXml;
                    SO_PHIEU = xmlDocumentSign.SelectNodes("//NamespaceCode:SO_PHIEU", nsmgrSign)[0].InnerXml;
                    NGAYCHUYEN = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    NGUOICHUYEN = "Tổng cụ Thuế";
                    LOAI_DENGHI = xmlDocumentSign.SelectNodes("//NamespaceCode:LOAI_DENGHI", nsmgrSign)[0].InnerXml;
                    LOAI_HOSO = xmlDocumentSign.SelectNodes("//NamespaceCode:LOAI_HOSO", nsmgrSign)[0].InnerXml;
                    DK_GHINO_NVTC = xmlDocumentSign.SelectNodes("//NamespaceCode:DK_GHINO_NVTC", nsmgrSign)[0].InnerXml;
                    TT_SOHUU = xmlDocumentSign.SelectNodes("//NamespaceCode:TT_SOHUU", nsmgrSign)[0].InnerXml;
                }

                XmlDocument xmlDocumentResponse = new XmlDocument();
                xmlDocumentResponse.LoadXml(Utility.LoadFile(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) + @"\TEMPLATE\GuiPhieuChuyen_Response.xml"));
                string namespaceURIResponse = xmlDocumentResponse.DocumentElement.NamespaceURI;
                if (!string.IsNullOrEmpty(namespaceURIResponse))
                {
                    XmlNamespaceManager nsmgrResponse = new XmlNamespaceManager(xmlDocumentResponse.NameTable);
                    nsmgrResponse.AddNamespace("NamespaceCode", namespaceURIResponse);
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:MSG_TYPE", nsmgrResponse)[0].InnerXml = MSG_TYPE;
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:SEQ_ID", nsmgrResponse)[0].InnerXml = SEQ_ID;
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:SEQ_REFID", nsmgrResponse)[0].InnerXml = SEQ_REFID;

                    xmlDocumentResponse.SelectNodes("//NamespaceCode:MA_HS", nsmgrResponse)[0].InnerXml = MA_HS;
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:MA_GCN", nsmgrResponse)[0].InnerXml = MA_GCN;
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:SO_PHIEU", nsmgrResponse)[0].InnerXml = SO_PHIEU;
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:NGAYCHUYEN", nsmgrResponse)[0].InnerXml = NGAYCHUYEN;
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:NGUOICHUYEN", nsmgrResponse)[0].InnerXml = NGUOICHUYEN;
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:LOAI_DENGHI", nsmgrResponse)[0].InnerXml = LOAI_DENGHI;
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:LOAI_HOSO", nsmgrResponse)[0].InnerXml = LOAI_HOSO;
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:DK_GHINO_NVTC", nsmgrResponse)[0].InnerXml = DK_GHINO_NVTC;
                    xmlDocumentResponse.SelectNodes("//NamespaceCode:TT_SOHUU", nsmgrResponse)[0].InnerXml = TT_SOHUU;
                }
                CVAN_MSGIInfo cVAN_MSGIInfo = new CVAN_MSGIInfo()
                {
                    CVAN_CODE = Guid.NewGuid().ToString().ToUpper(),
                    CVAN_CONTENT_XML = xmlDocumentResponse.OuterXml,
                    CVAN_MSGO_CODE = CVAN_CODE,
                    CVAN_MSG_TYPE_CODE = MSG_TYPE,
                    CVAN_MSG_TYPE_NAME = "Hồ sơ địa chính",
                    CVAN_STATUS_CODE = "01",
                    CVAN_STATUS_NAME = "Tổng cục Thuế tiếp nhận thành công",
                    CUSER = "TCT"
                };
                int result = DataObjectFactory.GetInstanceCVAN_MSGI().Add(cVAN_MSGIInfo);
                return new Response
                {
                    ResultCode = result == 1 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                    Message = result == 1 ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                    ReturnValue = result == 1 ? cVAN_MSGIInfo.CVAN_CONTENT_XML : string.Empty
                };

            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = ex.Message
                };
            }
        }

    }
}
