using Aspose.Cells;
using CMCLIS.GATEWAY.CORE;
using CMCLIS.GATEWAY.CORE.Redis;
using CMCLIS.GATEWAY.CORE.Sercurity;
using CMCLIS.GATEWAY.DATA.OBJECTS;
using CMCLIS.GATEWAY.ENTITY;
using CMCLIS.GATEWAY.SETTING;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Channels;
using System.Web;

namespace CMCLIS.GATEWAY.SERVICES
{

    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    public class API_LIEN_THONG : IAPI_LIEN_THONG
    {
        private static string Authorization = string.Empty;
        protected API_LIEN_THONG()
        {
            var request = OperationContext.Current.IncomingMessageProperties[HttpRequestMessageProperty.Name] as HttpRequestMessageProperty;
            Authorization = request.Headers[Config.API_KEY];
            if (string.IsNullOrEmpty(Authorization))
            {
                Authorization = Config.KEY_AUTHORIZATION;
            }
        }
        #region Create Functions "CVAN_DM_LT_THUE"
        public Response CVAN_DM_LT_THUE_Add(CVAN_DM_LT_THUEInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_DM_LT_THUE().Add(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_ADD : Constant.MESSAGE_ERROR_ADD,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_ADD,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_DM_LT_THUE_Update(CVAN_DM_LT_THUEInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_DM_LT_THUE().Update(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_UPDATE : Constant.MESSAGE_ERROR_UPDATE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_UPDATE,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_DM_LT_THUE_Delete(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_DM_LT_THUE().Delete(int.Parse(ID));
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_DELETE : Constant.MESSAGE_ERROR_DELETE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_DELETE,
                    ReturnValue = "0"
                };
            }
        }
        public ResponseInfo<CVAN_DM_LT_THUEInfo> CVAN_DM_LT_THUE_GetInfo(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    CVAN_DM_LT_THUEInfo result = DataObjectFactory.GetInstanceCVAN_DM_LT_THUE().GetInfo(int.Parse(ID));
                    return new ResponseInfo<CVAN_DM_LT_THUEInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? 1 : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseInfo<CVAN_DM_LT_THUEInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseInfo<CVAN_DM_LT_THUEInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponseList<CVAN_DM_LT_THUEInfo> CVAN_DM_LT_THUE_GetList()
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    List<CVAN_DM_LT_THUEInfo> result = DataObjectFactory.GetInstanceCVAN_DM_LT_THUE().GetList();
                    return new ResponseList<CVAN_DM_LT_THUEInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? result.Count : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseList<CVAN_DM_LT_THUEInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseList<CVAN_DM_LT_THUEInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponsePage<CVAN_DM_LT_THUEInfo> CVAN_DM_LT_THUE_GetAllWithPadding(string CVAN_CODE, string CVAN_NAME, string CVAN_PARENT, string CVAN_STATUS, string pageIndex, string pageSize)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int totalRecords = 0;
                    CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                    CVAN_NAME = CVAN_NAME == "-1" ? string.Empty : CVAN_NAME;
                    CVAN_PARENT = CVAN_PARENT == "-1" ? string.Empty : CVAN_PARENT;
                    List<CVAN_DM_LT_THUEInfo> result = DataObjectFactory.GetInstanceCVAN_DM_LT_THUE().CVAN_DM_LT_THUE_GetAllWithPadding(CVAN_CODE, CVAN_NAME, CVAN_PARENT, int.Parse(CVAN_STATUS), int.Parse(pageIndex), int.Parse(pageSize), ref totalRecords);
                    return new ResponsePage<CVAN_DM_LT_THUEInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = result != null ? totalRecords : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponsePage<CVAN_DM_LT_THUEInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponsePage<CVAN_DM_LT_THUEInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    PageIndex = int.Parse(pageIndex),
                    PageSize = int.Parse(pageSize),
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public Response CVAN_DM_LT_THUE_EXPORT_TEMPLATE(string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_DM_LT_THUE_EXPORT_TEMPLATE.xlsx";
                    if (File.Exists(designerFile))
                    {
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_DM_LT_THUE_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_DM_LT_THUE_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }
        public Response CVAN_DM_LT_THUE_EXPORT_DATA(string CVAN_CODE, string CVAN_NAME, string CVAN_PARENT, string CVAN_STATUS, string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_DM_LT_THUE_EXPORT_DATA.xlsx";
                    if (File.Exists(designerFile))
                    {
                        int totalRecords = 0;
                        CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                        CVAN_NAME = CVAN_NAME == "-1" ? string.Empty : CVAN_NAME;
                        CVAN_PARENT = CVAN_PARENT == "-1" ? string.Empty : CVAN_PARENT;
                        List<CVAN_DM_LT_THUEInfo> resultCVAN_DM_LT_THUE = DataObjectFactory.GetInstanceCVAN_DM_LT_THUE().CVAN_DM_LT_THUE_GetAllWithPadding(CVAN_CODE, CVAN_NAME, CVAN_PARENT, int.Parse(CVAN_STATUS), 1, int.MaxValue, ref totalRecords);
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        DataTable dataTableCVAN_DM_LT_THUE = DataObjectFactory.GetInstanceCVAN_DM_LT_THUE().ToDataTable(resultCVAN_DM_LT_THUE);
                        designer.SetDataSource("CVAN_DM_LT_THUE", dataTableCVAN_DM_LT_THUE.DefaultView);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_DM_LT_THUE_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_DM_LT_THUE_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                            case "pdf":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.pdf", "CVAN_DM_LT_THUE_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Pdf);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }

        #endregion
        #region Create Functions "CVAN_DM_MSG_TYPE"
        public Response CVAN_DM_MSG_TYPE_Add(CVAN_DM_MSG_TYPEInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_DM_MSG_TYPE().Add(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_ADD : Constant.MESSAGE_ERROR_ADD,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_ADD,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_DM_MSG_TYPE_Update(CVAN_DM_MSG_TYPEInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_DM_MSG_TYPE().Update(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_UPDATE : Constant.MESSAGE_ERROR_UPDATE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_UPDATE,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_DM_MSG_TYPE_Delete(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_DM_MSG_TYPE().Delete(int.Parse(ID));
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_DELETE : Constant.MESSAGE_ERROR_DELETE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_DELETE,
                    ReturnValue = "0"
                };
            }
        }
        public ResponseInfo<CVAN_DM_MSG_TYPEInfo> CVAN_DM_MSG_TYPE_GetInfo(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    CVAN_DM_MSG_TYPEInfo result = DataObjectFactory.GetInstanceCVAN_DM_MSG_TYPE().GetInfo(int.Parse(ID));
                    return new ResponseInfo<CVAN_DM_MSG_TYPEInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? 1 : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseInfo<CVAN_DM_MSG_TYPEInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseInfo<CVAN_DM_MSG_TYPEInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponseList<CVAN_DM_MSG_TYPEInfo> CVAN_DM_MSG_TYPE_GetList()
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    List<CVAN_DM_MSG_TYPEInfo> result = DataObjectFactory.GetInstanceCVAN_DM_MSG_TYPE().GetList();
                    return new ResponseList<CVAN_DM_MSG_TYPEInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? result.Count : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseList<CVAN_DM_MSG_TYPEInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseList<CVAN_DM_MSG_TYPEInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponsePage<CVAN_DM_MSG_TYPEInfo> CVAN_DM_MSG_TYPE_GetAllWithPadding(string CVAN_CODE, string CVAN_NAME, string CVAN_STATUS, string pageIndex, string pageSize)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int totalRecords = 0;
                    CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                    CVAN_NAME = CVAN_NAME == "-1" ? string.Empty : CVAN_NAME;
                    List<CVAN_DM_MSG_TYPEInfo> result = DataObjectFactory.GetInstanceCVAN_DM_MSG_TYPE().CVAN_DM_MSG_TYPE_GetAllWithPadding(CVAN_CODE, CVAN_NAME, int.Parse(CVAN_STATUS), int.Parse(pageIndex), int.Parse(pageSize), ref totalRecords);
                    return new ResponsePage<CVAN_DM_MSG_TYPEInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = result != null ? totalRecords : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponsePage<CVAN_DM_MSG_TYPEInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponsePage<CVAN_DM_MSG_TYPEInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    PageIndex = int.Parse(pageIndex),
                    PageSize = int.Parse(pageSize),
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public Response CVAN_DM_MSG_TYPE_EXPORT_TEMPLATE(string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_DM_MSG_TYPE_EXPORT_TEMPLATE.xlsx";
                    if (File.Exists(designerFile))
                    {
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_DM_MSG_TYPE_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_DM_MSG_TYPE_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }
        public Response CVAN_DM_MSG_TYPE_EXPORT_DATA(string CVAN_CODE, string CVAN_NAME, string CVAN_STATUS, string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_DM_MSG_TYPE_EXPORT_DATA.xlsx";
                    if (File.Exists(designerFile))
                    {
                        int totalRecords = 0;
                        CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                        CVAN_NAME = CVAN_NAME == "-1" ? string.Empty : CVAN_NAME;
                        List<CVAN_DM_MSG_TYPEInfo> resultCVAN_DM_MSG_TYPE = DataObjectFactory.GetInstanceCVAN_DM_MSG_TYPE().CVAN_DM_MSG_TYPE_GetAllWithPadding(CVAN_CODE, CVAN_NAME, int.Parse(CVAN_STATUS), 1, int.MaxValue, ref totalRecords);
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        DataTable dataTableCVAN_DM_MSG_TYPE = DataObjectFactory.GetInstanceCVAN_DM_MSG_TYPE().ToDataTable(resultCVAN_DM_MSG_TYPE);
                        designer.SetDataSource("CVAN_DM_MSG_TYPE", dataTableCVAN_DM_MSG_TYPE.DefaultView);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_DM_MSG_TYPE_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_DM_MSG_TYPE_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                            case "pdf":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.pdf", "CVAN_DM_MSG_TYPE_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Pdf);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }

        #endregion
        #region Create Functions "CVAN_DM_STATUS"
        public Response CVAN_DM_STATUS_Add(CVAN_DM_STATUSInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_DM_STATUS().Add(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_ADD : Constant.MESSAGE_ERROR_ADD,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_ADD,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_DM_STATUS_Update(CVAN_DM_STATUSInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_DM_STATUS().Update(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_UPDATE : Constant.MESSAGE_ERROR_UPDATE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_UPDATE,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_DM_STATUS_Delete(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_DM_STATUS().Delete(int.Parse(ID));
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_DELETE : Constant.MESSAGE_ERROR_DELETE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_DELETE,
                    ReturnValue = "0"
                };
            }
        }
        public ResponseInfo<CVAN_DM_STATUSInfo> CVAN_DM_STATUS_GetInfo(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    CVAN_DM_STATUSInfo result = DataObjectFactory.GetInstanceCVAN_DM_STATUS().GetInfo(int.Parse(ID));
                    return new ResponseInfo<CVAN_DM_STATUSInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? 1 : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseInfo<CVAN_DM_STATUSInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseInfo<CVAN_DM_STATUSInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponseList<CVAN_DM_STATUSInfo> CVAN_DM_STATUS_GetList()
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    List<CVAN_DM_STATUSInfo> result = DataObjectFactory.GetInstanceCVAN_DM_STATUS().GetList();
                    return new ResponseList<CVAN_DM_STATUSInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? result.Count : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseList<CVAN_DM_STATUSInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseList<CVAN_DM_STATUSInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponsePage<CVAN_DM_STATUSInfo> CVAN_DM_STATUS_GetAllWithPadding(string CVAN_CODE, string CVAN_NAME, string CVAN_STATUS, string pageIndex, string pageSize)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int totalRecords = 0;
                    CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                    CVAN_NAME = CVAN_NAME == "-1" ? string.Empty : CVAN_NAME;
                    List<CVAN_DM_STATUSInfo> result = DataObjectFactory.GetInstanceCVAN_DM_STATUS().CVAN_DM_STATUS_GetAllWithPadding(CVAN_CODE, CVAN_NAME, int.Parse(CVAN_STATUS), int.Parse(pageIndex), int.Parse(pageSize), ref totalRecords);
                    return new ResponsePage<CVAN_DM_STATUSInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = result != null ? totalRecords : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponsePage<CVAN_DM_STATUSInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponsePage<CVAN_DM_STATUSInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    PageIndex = int.Parse(pageIndex),
                    PageSize = int.Parse(pageSize),
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public Response CVAN_DM_STATUS_EXPORT_TEMPLATE(string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_DM_STATUS_EXPORT_TEMPLATE.xlsx";
                    if (File.Exists(designerFile))
                    {
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_DM_STATUS_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_DM_STATUS_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }
        public Response CVAN_DM_STATUS_EXPORT_DATA(string CVAN_CODE, string CVAN_NAME, string CVAN_STATUS, string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_DM_STATUS_EXPORT_DATA.xlsx";
                    if (File.Exists(designerFile))
                    {
                        int totalRecords = 0;
                        CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                        CVAN_NAME = CVAN_NAME == "-1" ? string.Empty : CVAN_NAME;
                        List<CVAN_DM_STATUSInfo> resultCVAN_DM_STATUS = DataObjectFactory.GetInstanceCVAN_DM_STATUS().CVAN_DM_STATUS_GetAllWithPadding(CVAN_CODE, CVAN_NAME, int.Parse(CVAN_STATUS), 1, int.MaxValue, ref totalRecords);
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        DataTable dataTableCVAN_DM_STATUS = DataObjectFactory.GetInstanceCVAN_DM_STATUS().ToDataTable(resultCVAN_DM_STATUS);
                        designer.SetDataSource("CVAN_DM_STATUS", dataTableCVAN_DM_STATUS.DefaultView);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_DM_STATUS_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_DM_STATUS_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                            case "pdf":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.pdf", "CVAN_DM_STATUS_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Pdf);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }

        #endregion
        #region Create Functions "CVAN_EXCHANGE"
        public Response CVAN_EXCHANGE_Add(CVAN_EXCHANGEInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_EXCHANGE().Add(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_ADD : Constant.MESSAGE_ERROR_ADD,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_ADD,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_EXCHANGE_Update(CVAN_EXCHANGEInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_EXCHANGE().Update(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_UPDATE : Constant.MESSAGE_ERROR_UPDATE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_UPDATE,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_EXCHANGE_Delete(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_EXCHANGE().Delete(int.Parse(ID));
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_DELETE : Constant.MESSAGE_ERROR_DELETE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_DELETE,
                    ReturnValue = "0"
                };
            }
        }
        public ResponseInfo<CVAN_EXCHANGEInfo> CVAN_EXCHANGE_GetInfo(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    CVAN_EXCHANGEInfo result = DataObjectFactory.GetInstanceCVAN_EXCHANGE().GetInfo(int.Parse(ID));
                    return new ResponseInfo<CVAN_EXCHANGEInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? 1 : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseInfo<CVAN_EXCHANGEInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseInfo<CVAN_EXCHANGEInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponseList<CVAN_EXCHANGEInfo> CVAN_EXCHANGE_GetList()
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    List<CVAN_EXCHANGEInfo> result = DataObjectFactory.GetInstanceCVAN_EXCHANGE().GetList();
                    return new ResponseList<CVAN_EXCHANGEInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? result.Count : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseList<CVAN_EXCHANGEInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseList<CVAN_EXCHANGEInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponsePage<CVAN_EXCHANGEInfo> CVAN_EXCHANGE_GetAllWithPadding(string CVAN_CODE, string CVAN_MSG_TYPE_CODE, string CVAN_STATUS_CODE, string CVAN_MA_GD, string pageIndex, string pageSize)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int totalRecords = 0;
                    CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                    CVAN_MSG_TYPE_CODE = CVAN_MSG_TYPE_CODE == "-1" ? string.Empty : CVAN_MSG_TYPE_CODE;
                    CVAN_STATUS_CODE = CVAN_STATUS_CODE == "-1" ? string.Empty : CVAN_STATUS_CODE;
                    CVAN_MA_GD = CVAN_MA_GD == "-1" ? string.Empty : CVAN_MA_GD;
                    List<CVAN_EXCHANGEInfo> result = DataObjectFactory.GetInstanceCVAN_EXCHANGE().CVAN_EXCHANGE_GetAllWithPadding(CVAN_CODE, CVAN_MSG_TYPE_CODE, CVAN_STATUS_CODE, CVAN_MA_GD, int.Parse(pageIndex), int.Parse(pageSize), ref totalRecords);
                    return new ResponsePage<CVAN_EXCHANGEInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = result != null ? totalRecords : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponsePage<CVAN_EXCHANGEInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponsePage<CVAN_EXCHANGEInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    PageIndex = int.Parse(pageIndex),
                    PageSize = int.Parse(pageSize),
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public Response CVAN_EXCHANGE_EXPORT_TEMPLATE(string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_EXCHANGE_EXPORT_TEMPLATE.xlsx";
                    if (File.Exists(designerFile))
                    {
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_EXCHANGE_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_EXCHANGE_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }
        public Response CVAN_EXCHANGE_EXPORT_DATA(string CVAN_CODE, string CVAN_MSG_TYPE_CODE, string CVAN_STATUS_CODE, string CVAN_MA_GD, string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_EXCHANGE_EXPORT_DATA.xlsx";
                    if (File.Exists(designerFile))
                    {
                        int totalRecords = 0;
                        CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                        CVAN_MSG_TYPE_CODE = CVAN_MSG_TYPE_CODE == "-1" ? string.Empty : CVAN_MSG_TYPE_CODE;
                        CVAN_STATUS_CODE = CVAN_STATUS_CODE == "-1" ? string.Empty : CVAN_STATUS_CODE;
                        CVAN_MA_GD = CVAN_MA_GD == "-1" ? string.Empty : CVAN_MA_GD;
                        List<CVAN_EXCHANGEInfo> resultCVAN_EXCHANGE = DataObjectFactory.GetInstanceCVAN_EXCHANGE().CVAN_EXCHANGE_GetAllWithPadding(CVAN_CODE, CVAN_MSG_TYPE_CODE, CVAN_STATUS_CODE, CVAN_MA_GD, 1, int.MaxValue, ref totalRecords);
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        DataTable dataTableCVAN_EXCHANGE = DataObjectFactory.GetInstanceCVAN_EXCHANGE().ToDataTable(resultCVAN_EXCHANGE);
                        designer.SetDataSource("CVAN_EXCHANGE", dataTableCVAN_EXCHANGE.DefaultView);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_EXCHANGE_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_EXCHANGE_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                            case "pdf":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.pdf", "CVAN_EXCHANGE_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Pdf);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }

        #endregion
        #region Create Functions "CVAN_MAIL"
        public Response CVAN_MAIL_Add(CVAN_MAILInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_MAIL().Add(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_ADD : Constant.MESSAGE_ERROR_ADD,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_ADD,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_MAIL_Update(CVAN_MAILInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_MAIL().Update(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_UPDATE : Constant.MESSAGE_ERROR_UPDATE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_UPDATE,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_MAIL_Delete(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_MAIL().Delete(int.Parse(ID));
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_DELETE : Constant.MESSAGE_ERROR_DELETE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_DELETE,
                    ReturnValue = "0"
                };
            }
        }
        public ResponseInfo<CVAN_MAILInfo> CVAN_MAIL_GetInfo(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    CVAN_MAILInfo result = DataObjectFactory.GetInstanceCVAN_MAIL().GetInfo(int.Parse(ID));
                    return new ResponseInfo<CVAN_MAILInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? 1 : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseInfo<CVAN_MAILInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseInfo<CVAN_MAILInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponseList<CVAN_MAILInfo> CVAN_MAIL_GetList()
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    List<CVAN_MAILInfo> result = DataObjectFactory.GetInstanceCVAN_MAIL().GetList();
                    return new ResponseList<CVAN_MAILInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? result.Count : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseList<CVAN_MAILInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseList<CVAN_MAILInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponsePage<CVAN_MAILInfo> CVAN_MAIL_GetAllWithPadding(string CVAN_FROM, string CVAN_TO, string CVAN_SUBJECT, string CVAN_TYPE_CODE, string CVAN_STATUS, string pageIndex, string pageSize)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int totalRecords = 0;
                    CVAN_FROM = CVAN_FROM == "-1" ? string.Empty : CVAN_FROM;
                    CVAN_TO = CVAN_TO == "-1" ? string.Empty : CVAN_TO;
                    CVAN_SUBJECT = CVAN_SUBJECT == "-1" ? string.Empty : CVAN_SUBJECT;
                    CVAN_TYPE_CODE = CVAN_TYPE_CODE == "-1" ? string.Empty : CVAN_TYPE_CODE;
                    List<CVAN_MAILInfo> result = DataObjectFactory.GetInstanceCVAN_MAIL().CVAN_MAIL_GetAllWithPadding(CVAN_FROM, CVAN_TO, CVAN_SUBJECT, CVAN_TYPE_CODE, int.Parse(CVAN_STATUS), int.Parse(pageIndex), int.Parse(pageSize), ref totalRecords);
                    return new ResponsePage<CVAN_MAILInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = result != null ? totalRecords : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponsePage<CVAN_MAILInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponsePage<CVAN_MAILInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    PageIndex = int.Parse(pageIndex),
                    PageSize = int.Parse(pageSize),
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public Response CVAN_MAIL_EXPORT_TEMPLATE(string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_MAIL_EXPORT_TEMPLATE.xlsx";
                    if (File.Exists(designerFile))
                    {
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_MAIL_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_MAIL_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }
        public Response CVAN_MAIL_EXPORT_DATA(string CVAN_FROM, string CVAN_TO, string CVAN_SUBJECT, string CVAN_TYPE_CODE, string CVAN_STATUS, string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_MAIL_EXPORT_DATA.xlsx";
                    if (File.Exists(designerFile))
                    {
                        int totalRecords = 0;
                        CVAN_FROM = CVAN_FROM == "-1" ? string.Empty : CVAN_FROM;
                        CVAN_TO = CVAN_TO == "-1" ? string.Empty : CVAN_TO;
                        CVAN_SUBJECT = CVAN_SUBJECT == "-1" ? string.Empty : CVAN_SUBJECT;
                        CVAN_TYPE_CODE = CVAN_TYPE_CODE == "-1" ? string.Empty : CVAN_TYPE_CODE;
                        List<CVAN_MAILInfo> resultCVAN_MAIL = DataObjectFactory.GetInstanceCVAN_MAIL().CVAN_MAIL_GetAllWithPadding(CVAN_FROM, CVAN_TO, CVAN_SUBJECT, CVAN_TYPE_CODE, int.Parse(CVAN_STATUS), 1, int.MaxValue, ref totalRecords);
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        DataTable dataTableCVAN_MAIL = DataObjectFactory.GetInstanceCVAN_MAIL().ToDataTable(resultCVAN_MAIL);
                        designer.SetDataSource("CVAN_MAIL", dataTableCVAN_MAIL.DefaultView);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_MAIL_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_MAIL_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                            case "pdf":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.pdf", "CVAN_MAIL_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Pdf);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }

        #endregion
        #region Create Functions "CVAN_MSGI"
        public Response CVAN_MSGI_Add(CVAN_MSGIInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_MSGI().Add(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_ADD : Constant.MESSAGE_ERROR_ADD,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_ADD,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_MSGI_Update(CVAN_MSGIInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_MSGI().Update(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_UPDATE : Constant.MESSAGE_ERROR_UPDATE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_UPDATE,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_MSGI_Delete(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_MSGI().Delete(int.Parse(ID));
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_DELETE : Constant.MESSAGE_ERROR_DELETE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_DELETE,
                    ReturnValue = "0"
                };
            }
        }
        public ResponseInfo<CVAN_MSGIInfo> CVAN_MSGI_GetInfo(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    CVAN_MSGIInfo result = DataObjectFactory.GetInstanceCVAN_MSGI().GetInfo(int.Parse(ID));
                    return new ResponseInfo<CVAN_MSGIInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? 1 : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseInfo<CVAN_MSGIInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseInfo<CVAN_MSGIInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponseList<CVAN_MSGIInfo> CVAN_MSGI_GetList()
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    List<CVAN_MSGIInfo> result = DataObjectFactory.GetInstanceCVAN_MSGI().GetList();
                    return new ResponseList<CVAN_MSGIInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? result.Count : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseList<CVAN_MSGIInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseList<CVAN_MSGIInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponsePage<CVAN_MSGIInfo> CVAN_MSGI_GetAllWithPadding(string CVAN_CODE, string CVAN_MSGO_CODE, string CVAN_MSG_TYPE_CODE, string CVAN_STATUS_CODE, string pageIndex, string pageSize)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int totalRecords = 0;
                    CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                    CVAN_MSGO_CODE = CVAN_MSGO_CODE == "-1" ? string.Empty : CVAN_MSGO_CODE;
                    CVAN_MSG_TYPE_CODE = CVAN_MSG_TYPE_CODE == "-1" ? string.Empty : CVAN_MSG_TYPE_CODE;
                    CVAN_STATUS_CODE = CVAN_STATUS_CODE == "-1" ? string.Empty : CVAN_STATUS_CODE;
                    List<CVAN_MSGIInfo> result = DataObjectFactory.GetInstanceCVAN_MSGI().CVAN_MSGI_GetAllWithPadding(CVAN_CODE, CVAN_MSGO_CODE, CVAN_MSG_TYPE_CODE, CVAN_STATUS_CODE, int.Parse(pageIndex), int.Parse(pageSize), ref totalRecords);
                    return new ResponsePage<CVAN_MSGIInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = result != null ? totalRecords : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponsePage<CVAN_MSGIInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponsePage<CVAN_MSGIInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    PageIndex = int.Parse(pageIndex),
                    PageSize = int.Parse(pageSize),
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public Response CVAN_MSGI_EXPORT_TEMPLATE(string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_MSGI_EXPORT_TEMPLATE.xlsx";
                    if (File.Exists(designerFile))
                    {
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_MSGI_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_MSGI_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }
        public Response CVAN_MSGI_EXPORT_DATA(string CVAN_CODE, string CVAN_MSGO_CODE, string CVAN_MSG_TYPE_CODE, string CVAN_STATUS_CODE, string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_MSGI_EXPORT_DATA.xlsx";
                    if (File.Exists(designerFile))
                    {
                        int totalRecords = 0;
                        CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                        CVAN_MSGO_CODE = CVAN_MSGO_CODE == "-1" ? string.Empty : CVAN_MSGO_CODE;
                        CVAN_MSG_TYPE_CODE = CVAN_MSG_TYPE_CODE == "-1" ? string.Empty : CVAN_MSG_TYPE_CODE;
                        CVAN_STATUS_CODE = CVAN_STATUS_CODE == "-1" ? string.Empty : CVAN_STATUS_CODE;
                        List<CVAN_MSGIInfo> resultCVAN_MSGI = DataObjectFactory.GetInstanceCVAN_MSGI().CVAN_MSGI_GetAllWithPadding(CVAN_CODE, CVAN_MSGO_CODE, CVAN_MSG_TYPE_CODE, CVAN_STATUS_CODE, 1, int.MaxValue, ref totalRecords);
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        DataTable dataTableCVAN_MSGI = DataObjectFactory.GetInstanceCVAN_MSGI().ToDataTable(resultCVAN_MSGI);
                        designer.SetDataSource("CVAN_MSGI", dataTableCVAN_MSGI.DefaultView);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_MSGI_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_MSGI_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                            case "pdf":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.pdf", "CVAN_MSGI_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Pdf);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }

        #endregion
        #region Create Functions "CVAN_MSGO"
        public Response CVAN_MSGO_Add(CVAN_MSGOInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_MSGO().Add(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_ADD : Constant.MESSAGE_ERROR_ADD,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_ADD,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_MSGO_Update(CVAN_MSGOInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_MSGO().Update(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_UPDATE : Constant.MESSAGE_ERROR_UPDATE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_UPDATE,
                    ReturnValue = "0"
                };
            }
        }
        public Response CVAN_MSGO_Delete(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceCVAN_MSGO().Delete(int.Parse(ID));
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_DELETE : Constant.MESSAGE_ERROR_DELETE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_DELETE,
                    ReturnValue = "0"
                };
            }
        }
        public ResponseInfo<CVAN_MSGOInfo> CVAN_MSGO_GetInfo(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    CVAN_MSGOInfo result = DataObjectFactory.GetInstanceCVAN_MSGO().GetInfo(int.Parse(ID));
                    return new ResponseInfo<CVAN_MSGOInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? 1 : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseInfo<CVAN_MSGOInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseInfo<CVAN_MSGOInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponseList<CVAN_MSGOInfo> CVAN_MSGO_GetList()
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    List<CVAN_MSGOInfo> result = DataObjectFactory.GetInstanceCVAN_MSGO().GetList();
                    return new ResponseList<CVAN_MSGOInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? result.Count : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseList<CVAN_MSGOInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseList<CVAN_MSGOInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponsePage<CVAN_MSGOInfo> CVAN_MSGO_GetAllWithPadding(string CVAN_CODE, string CVAN_MSG_TYPE_CODE, string CVAN_SENDER_CODE, string CVAN_STATUS_SEND, string pageIndex, string pageSize)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int totalRecords = 0;
                    CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                    CVAN_MSG_TYPE_CODE = CVAN_MSG_TYPE_CODE == "-1" ? string.Empty : CVAN_MSG_TYPE_CODE;
                    CVAN_SENDER_CODE = CVAN_SENDER_CODE == "-1" ? string.Empty : CVAN_SENDER_CODE;
                    List<CVAN_MSGOInfo> result = DataObjectFactory.GetInstanceCVAN_MSGO().CVAN_MSGO_GetAllWithPadding(CVAN_CODE, CVAN_MSG_TYPE_CODE, CVAN_SENDER_CODE, int.Parse(CVAN_STATUS_SEND), int.Parse(pageIndex), int.Parse(pageSize), ref totalRecords);
                    return new ResponsePage<CVAN_MSGOInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = result != null ? totalRecords : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponsePage<CVAN_MSGOInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponsePage<CVAN_MSGOInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    PageIndex = int.Parse(pageIndex),
                    PageSize = int.Parse(pageSize),
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public Response CVAN_MSGO_EXPORT_TEMPLATE(string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_MSGO_EXPORT_TEMPLATE.xlsx";
                    if (File.Exists(designerFile))
                    {
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_MSGO_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_MSGO_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }
        public Response CVAN_MSGO_EXPORT_DATA(string CVAN_CODE, string CVAN_MSG_TYPE_CODE, string CVAN_SENDER_CODE, string CVAN_STATUS_SEND, string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/CVAN_MSGO_EXPORT_DATA.xlsx";
                    if (File.Exists(designerFile))
                    {
                        int totalRecords = 0;
                        CVAN_CODE = CVAN_CODE == "-1" ? string.Empty : CVAN_CODE;
                        CVAN_MSG_TYPE_CODE = CVAN_MSG_TYPE_CODE == "-1" ? string.Empty : CVAN_MSG_TYPE_CODE;
                        CVAN_SENDER_CODE = CVAN_SENDER_CODE == "-1" ? string.Empty : CVAN_SENDER_CODE;
                        List<CVAN_MSGOInfo> resultCVAN_MSGO = DataObjectFactory.GetInstanceCVAN_MSGO().CVAN_MSGO_GetAllWithPadding(CVAN_CODE, CVAN_MSG_TYPE_CODE, CVAN_SENDER_CODE, int.Parse(CVAN_STATUS_SEND), 1, int.MaxValue, ref totalRecords);
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        DataTable dataTableCVAN_MSGO = DataObjectFactory.GetInstanceCVAN_MSGO().ToDataTable(resultCVAN_MSGO);
                        designer.SetDataSource("CVAN_MSGO", dataTableCVAN_MSGO.DefaultView);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "CVAN_MSGO_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "CVAN_MSGO_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                            case "pdf":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.pdf", "CVAN_MSGO_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Pdf);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }

        #endregion

    }
}
