using Aspose.Cells;
using CMCLIS.GATEWAY.CORE;
using CMCLIS.GATEWAY.CORE.Redis;
using CMCLIS.GATEWAY.CORE.Sercurity;
using CMCLIS.GATEWAY.DATA.OBJECTS;
using CMCLIS.GATEWAY.ENTITY;
using CMCLIS.GATEWAY.SETTING;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Channels;
using System.Web;

namespace CMCLIS.GATEWAY.SERVICES
{

    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    public class API_FILE_SERVER : IAPI_FILE_SERVER
    {
        private static string Authorization = string.Empty;
        protected API_FILE_SERVER()
        {
            var request = OperationContext.Current.IncomingMessageProperties[HttpRequestMessageProperty.Name] as HttpRequestMessageProperty;
            Authorization = request.Headers[Config.API_KEY];
            if (string.IsNullOrEmpty(Authorization))
            {
                Authorization = Config.KEY_AUTHORIZATION;
            }

        }

        #region Create Functions "FILE_SERVER_DATA"
        public Response FILE_SERVER_DATA_Add(FILE_SERVER_DATAInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceFILE_SERVER_DATA().Add(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_ADD : Constant.MESSAGE_ERROR_ADD,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_ADD,
                    ReturnValue = "0"
                };
            }
        }
        public Response FILE_SERVER_DATA_Update(FILE_SERVER_DATAInfo info)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceFILE_SERVER_DATA().Update(info);
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_UPDATE : Constant.MESSAGE_ERROR_UPDATE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_UPDATE,
                    ReturnValue = "0"
                };
            }
        }
        public Response FILE_SERVER_DATA_Delete(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int result = DataObjectFactory.GetInstanceFILE_SERVER_DATA().Delete(int.Parse(ID));
                    return new Response
                    {
                        ResultCode = result > 0 ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result > 0 ? Constant.MESSAGE_SUCCESS_DELETE : Constant.MESSAGE_ERROR_DELETE,
                        ReturnValue = result.ToString()
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = "0"
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR_DELETE,
                    ReturnValue = "0"
                };
            }
        }
        public ResponseInfo<FILE_SERVER_DATAInfo> FILE_SERVER_DATA_GetInfo(string ID)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    FILE_SERVER_DATAInfo result = DataObjectFactory.GetInstanceFILE_SERVER_DATA().GetInfo(int.Parse(ID));
                    return new ResponseInfo<FILE_SERVER_DATAInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? 1 : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseInfo<FILE_SERVER_DATAInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseInfo<FILE_SERVER_DATAInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponseList<FILE_SERVER_DATAInfo> FILE_SERVER_DATA_GetList()
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    List<FILE_SERVER_DATAInfo> result = DataObjectFactory.GetInstanceFILE_SERVER_DATA().GetList();
                    return new ResponseList<FILE_SERVER_DATAInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        TotalRecords = result != null ? result.Count : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponseList<FILE_SERVER_DATAInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponseList<FILE_SERVER_DATAInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public ResponsePage<FILE_SERVER_DATAInfo> FILE_SERVER_DATA_GetAllWithPadding(string FILE_ID, string DOC_TYPE, string FILE_NAME, string TRAN_ID, string REGION_ID, string pageIndex, string pageSize)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    int totalRecords = 0;
                    FILE_ID = FILE_ID == "-1" ? string.Empty : FILE_ID;
                    DOC_TYPE = DOC_TYPE == "-1" ? string.Empty : DOC_TYPE;
                    FILE_NAME = FILE_NAME == "-1" ? string.Empty : FILE_NAME;
                    TRAN_ID = TRAN_ID == "-1" ? string.Empty : TRAN_ID;
                    REGION_ID = REGION_ID == "-1" ? string.Empty : REGION_ID;
                    List<FILE_SERVER_DATAInfo> result = DataObjectFactory.GetInstanceFILE_SERVER_DATA().FILE_SERVER_DATA_GetAllWithPadding(FILE_ID, DOC_TYPE, FILE_NAME, TRAN_ID, REGION_ID, int.Parse(pageIndex), int.Parse(pageSize), ref totalRecords);
                    return new ResponsePage<FILE_SERVER_DATAInfo>
                    {
                        ResultCode = result != null ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = result != null ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = result != null ? totalRecords : 0,
                        Data = result
                    };
                }
                else
                {
                    return new ResponsePage<FILE_SERVER_DATAInfo>
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        PageIndex = int.Parse(pageIndex),
                        PageSize = int.Parse(pageSize),
                        TotalRecords = 0,
                        Data = null
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new ResponsePage<FILE_SERVER_DATAInfo>
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    PageIndex = int.Parse(pageIndex),
                    PageSize = int.Parse(pageSize),
                    TotalRecords = 0,
                    Data = null
                };
            }
        }
        public Response FILE_SERVER_DATA_EXPORT_TEMPLATE(string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/FILE_SERVER_DATA_EXPORT_TEMPLATE.xlsx";
                    if (File.Exists(designerFile))
                    {
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "FILE_SERVER_DATA_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "FILE_SERVER_DATA_EXPORT_TEMPLATE");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }
        public Response FILE_SERVER_DATA_EXPORT_DATA(string FILE_ID, string DOC_TYPE, string FILE_NAME, string TRAN_ID, string REGION_ID, string extension)
        {
            try
            {
                if (!string.IsNullOrEmpty(Authorization))
                {
                    string pathFileExcel = string.Empty;
                    string designerFile = HttpContext.Current.Server.MapPath("~") + "/Report/Template/FILE_SERVER_DATA_EXPORT_DATA.xlsx";
                    if (File.Exists(designerFile))
                    {
                        int totalRecords = 0;
                        FILE_ID = FILE_ID == "-1" ? string.Empty : FILE_ID;
                        DOC_TYPE = DOC_TYPE == "-1" ? string.Empty : DOC_TYPE;
                        FILE_NAME = FILE_NAME == "-1" ? string.Empty : FILE_NAME;
                        TRAN_ID = TRAN_ID == "-1" ? string.Empty : TRAN_ID;
                        REGION_ID = REGION_ID == "-1" ? string.Empty : REGION_ID;
                        List<FILE_SERVER_DATAInfo> resultFILE_SERVER_DATA = DataObjectFactory.GetInstanceFILE_SERVER_DATA().FILE_SERVER_DATA_GetAllWithPadding(FILE_ID, DOC_TYPE, FILE_NAME, TRAN_ID, REGION_ID, 1, int.MaxValue, ref totalRecords);
                        var designer = new WorkbookDesigner();
                        var loadOptions = new LoadOptions(LoadFormat.Xlsx);
                        designer.Workbook = new Workbook(designerFile, loadOptions);
                        DataTable dataTableFILE_SERVER_DATA = DataObjectFactory.GetInstanceFILE_SERVER_DATA().ToDataTable(resultFILE_SERVER_DATA);
                        designer.SetDataSource("FILE_SERVER_DATA", dataTableFILE_SERVER_DATA.DefaultView);
                        designer.Process();
                        if (!Directory.Exists(HttpContext.Current.Server.MapPath("~") + "/Report/Export"))
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~") + "/Report/Export");
                        }
                        switch (extension.ToLower())
                        {
                            case "xls":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xls", "FILE_SERVER_DATA_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Excel97To2003);
                                break;
                            case "xlsx":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.xlsx", "FILE_SERVER_DATA_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Xlsx);
                                break;
                            case "pdf":
                                pathFileExcel = "/Report/Export/" + String.Format("{0}.pdf", "FILE_SERVER_DATA_EXPORT_DATA");
                                designer.Workbook.Save(Path.Combine(HttpContext.Current.Server.MapPath("~") + pathFileExcel), SaveFormat.Pdf);
                                break;
                        }
                    }
                    return new Response
                    {
                        ResultCode = !string.IsNullOrEmpty(pathFileExcel) ? Constant.RETURN_CODE_SUCCESS : Constant.RETURN_CODE_ERROR,
                        Message = !string.IsNullOrEmpty(pathFileExcel) ? Constant.MESSAGE_SUCCESS : Constant.MESSAGE_ERROR,
                        ReturnValue = "/Services" + pathFileExcel
                    };
                }
                else
                {
                    return new Response
                    {
                        ResultCode = Constant.RETURN_CODE_ERROR,
                        Message = Constant.MESSAGE_AUT_ERROR,
                        ReturnValue = string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                LogEventError.LogEvent(System.Reflection.MethodBase.GetCurrentMethod().Name, ex);
                return new Response
                {
                    ResultCode = Constant.RETURN_CODE_ERROR,
                    Message = Constant.MESSAGE_ERROR,
                    ReturnValue = string.Empty
                };
            }
        }

        #endregion

    }
}
